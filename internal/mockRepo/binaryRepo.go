// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\repository\binaryRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBinaryRepository is a mock of BinaryRepository interface.
type MockBinaryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryRepositoryMockRecorder
}

// MockBinaryRepositoryMockRecorder is the mock recorder for MockBinaryRepository.
type MockBinaryRepositoryMockRecorder struct {
	mock *MockBinaryRepository
}

// NewMockBinaryRepository creates a new mock instance.
func NewMockBinaryRepository(ctrl *gomock.Controller) *MockBinaryRepository {
	mock := &MockBinaryRepository{ctrl: ctrl}
	mock.recorder = &MockBinaryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinaryRepository) EXPECT() *MockBinaryRepositoryMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockBinaryRepository) Load(link string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", link)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockBinaryRepositoryMockRecorder) Load(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockBinaryRepository)(nil).Load), link)
}

// Save mocks base method.
func (m *MockBinaryRepository) Save(data []byte, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", data, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockBinaryRepositoryMockRecorder) Save(data, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBinaryRepository)(nil).Save), data, filename)
}
